{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wzgbyP2HC2DR"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## üñºÔ∏è Procesamiento de Im√°genes: Dataset MNIST\n",
        "### Gu√≠a paso a paso sin redes neuronales\n",
        "\n",
        "### 1. Descarga y Carga del Dataset\n",
        "# Usaremos `sklearn` para cargar el dataset digits (similar a MNIST pero m√°s simple)"
      ],
      "metadata": {
        "id": "HDIQ0SdfD_zm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# %%\n",
        "from sklearn.datasets import load_digits\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Cargar dataset\n",
        "digits = load_digits()\n",
        "print(\"Dataset cargado exitosamente!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hZUPxk4ZEDTI",
        "outputId": "955148f9-b50d-40d6-fe2b-b5dbde108d28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset cargado exitosamente!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ver estructura del dataset\n",
        "print(f\"\\nTipo de dato: {type(digits)}\")\n",
        "print(f\"N√∫mero de im√°genes: {len(digits.images)}\")\n",
        "print(f\"Tama√±o de cada imagen: {digits.images[0].shape}\")\n",
        "print(f\"Formato de las im√°genes: {digits.images.shape}\")\n",
        "print(f\"Formato de las etiquetas: {digits.target.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Li6Xoi5iEacD",
        "outputId": "d55773c4-d712-4e49-9276-70c50de5fa9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Tipo de dato: <class 'sklearn.utils._bunch.Bunch'>\n",
            "N√∫mero de im√°genes: 1797\n",
            "Tama√±o de cada imagen: (8, 8)\n",
            "Formato de las im√°genes: (1797, 8, 8)\n",
            "Formato de las etiquetas: (1797,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Es importante la carga y descarga del datadataset, para poder trabajar de una manera correcta"
      ],
      "metadata": {
        "id": "npaARoC4qPf3"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VseJEUfSqO1k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## 2. Inspecci√≥n de los Datos\n",
        "# Veamos c√≥mo son los datos internamente\n",
        "\n",
        "\n",
        "# Mostrar algunos ejemplos de datos crudos"
      ],
      "metadata": {
        "id": "SKIzg31ZEjA-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"Primeras 3 im√°genes (formato plano):\")\n",
        "print(digits.images[:3].reshape(3, -1))\n",
        "\n",
        "print(\"\\nEtiquetas correspondientes:\")\n",
        "print(digits.target[:3])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKnGTPwREgmf",
        "outputId": "5da8edfb-953c-4695-a386-4c36f68f9238"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primeras 3 im√°genes (formato plano):\n",
            "[[ 0.  0.  5. 13.  9.  1.  0.  0.  0.  0. 13. 15. 10. 15.  5.  0.  0.  3.\n",
            "  15.  2.  0. 11.  8.  0.  0.  4. 12.  0.  0.  8.  8.  0.  0.  5.  8.  0.\n",
            "   0.  9.  8.  0.  0.  4. 11.  0.  1. 12.  7.  0.  0.  2. 14.  5. 10. 12.\n",
            "   0.  0.  0.  0.  6. 13. 10.  0.  0.  0.]\n",
            " [ 0.  0.  0. 12. 13.  5.  0.  0.  0.  0.  0. 11. 16.  9.  0.  0.  0.  0.\n",
            "   3. 15. 16.  6.  0.  0.  0.  7. 15. 16. 16.  2.  0.  0.  0.  0.  1. 16.\n",
            "  16.  3.  0.  0.  0.  0.  1. 16. 16.  6.  0.  0.  0.  0.  1. 16. 16.  6.\n",
            "   0.  0.  0.  0.  0. 11. 16. 10.  0.  0.]\n",
            " [ 0.  0.  0.  4. 15. 12.  0.  0.  0.  0.  3. 16. 15. 14.  0.  0.  0.  0.\n",
            "   8. 13.  8. 16.  0.  0.  0.  0.  1.  6. 15. 11.  0.  0.  0.  1.  8. 13.\n",
            "  15.  1.  0.  0.  0.  9. 16. 16.  5.  0.  0.  0.  0.  3. 13. 16. 16. 11.\n",
            "   5.  0.  0.  0.  0.  3. 11. 16.  9.  0.]]\n",
            "\n",
            "Etiquetas correspondientes:\n",
            "[0 1 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####*Aqui podemos visualizar como realemte se procesan las imagenes y como las \"ve\" la computqdora, son un gran conjunto de numeros (pixeles)*"
      ],
      "metadata": {
        "id": "P9uKIvXNqe3r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## 3. Visualizaci√≥n de Im√°genes\n",
        "# Veamos c√≥mo se ven realmente las im√°genes\n",
        "\n",
        "\n",
        "# Funci√≥n para mostrar m√∫ltiples im√°genes"
      ],
      "metadata": {
        "id": "IMQM6ZMPEtJX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_digits(images, labels, n_rows=4, n_cols=5):\n",
        "    fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, 8))\n",
        "    for i, ax in enumerate(axes.flat):\n",
        "        if i < len(images):\n",
        "            ax.imshow(images[i], cmap='gray')\n",
        "            ax.set_title(f\"Label: {labels[i]}\")\n",
        "            ax.axis('off')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Mostrar primeras 20 im√°genes\n",
        "plot_digits(digits.images, digits.target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "id": "korRpQ7DE01T",
        "outputId": "4d87d16d-57b3-4e89-ca8f-62e77eae5cd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 20 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "podemos obvervar varios comandos para poder ver de manera secuencial varias imagenes en un misen apartado"
      ],
      "metadata": {
        "id": "eeFlqrMgq5G9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. An√°lisis Estad√≠stico B√°sico\n",
        "Veamos algunas propiedades interesantes de las im√°genes\n",
        "\n",
        "# Calcular promedio de p√≠xeles por d√≠gito"
      ],
      "metadata": {
        "id": "NCDddN34FLKg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "digit_means = {}\n",
        "for digit in range(10):\n",
        "    digit_imgs = digits.images[digits.target == digit]\n",
        "    digit_means[digit] = np.mean(digit_imgs, axis=0)\n",
        "\n",
        "# Mostrar promedios\n",
        "fig, axes = plt.subplots(2, 5, figsize=(12, 5))\n",
        "for digit, ax in zip(range(10), axes.flat):\n",
        "    ax.imshow(digit_means[digit], cmap='gray')\n",
        "    ax.set_title(f\"D√≠gito {digit}\")\n",
        "    ax.axis('off')\n",
        "plt.suptitle(\"Promedio de p√≠xeles por d√≠gito\", fontsize=16)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "mifdGmWSFQn4",
        "outputId": "b7b0fb82-b996-499c-830d-4628d4699b8e"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'digits' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1429847904.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdigit_means\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdigit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mdigit_imgs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdigits\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdigits\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mdigit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mdigit_means\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdigit\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdigit_imgs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'digits' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este apartado nos ayuda a tener un promedio de cuantos pixeles tenemos en cada imagen"
      ],
      "metadata": {
        "id": "pxrtLmdAAETI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Preprocesamiento B√°sico\n",
        "Vamos a realizar algunas operaciones comunes sin redes neuronales\n"
      ],
      "metadata": {
        "id": "7vlSHSZVFZE4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from skimage.filters import threshold_otsu\n",
        "from skimage.transform import resize\n",
        "\n",
        "# Ejemplo: Umbralizaci√≥n (binarizaci√≥n)\n",
        "def binarize_image(img, threshold=None):\n",
        "    \"\"\"Convierte imagen a blanco y negro\"\"\"\n",
        "    if threshold is None:\n",
        "        threshold = threshold_otsu(img)\n",
        "    return img > threshold\n",
        "\n",
        "# Aplicar a una imagen de muestra\n",
        "sample_img = digits.images[0]\n",
        "binary_img = binarize_image(sample_img)\n",
        "\n",
        "# Mostrar resultado\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n",
        "ax1.imshow(sample_img, cmap='gray')\n",
        "ax1.set_title(\"Original\")\n",
        "ax1.axis('off')\n",
        "\n",
        "ax2.imshow(binary_img, cmap='gray')\n",
        "ax2.set_title(\"Binarizada\")\n",
        "ax2.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "fwcTNegGFbKQ",
        "outputId": "68cab0d0-5e8c-436e-946d-ca9bba8c9105"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "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d9xxR0RE8bh5+vTp2LhxY9x9991x8803F9e/7bbbzjvHhTwWWjfxdw1rjLrGCPxfzheJvXr1et/tv/7669GmTZsm6370ox9t9oxnH3AaVVdXx+HDh4t/P3PmTPz0pz+NPn36RGVlZXTp0iVqampi27ZtDjjARRk0aFAMHTo0hg4dGuPGjYt169ZFv3794jvf+U68884773nfc49f1dXVERElx68//elPMXTo0OjQoUN07tw5ampqYvr06RER542/C/Gvf/0rvvrVr8ZnPvOZeOqpp0puO3ToUDz44IPRrVu3qKqqipqamuL2G/f773//O06cOBF9+vRpsu3zveV8IY+F1k38XcNuuOGG+NCHPhTbtm17z/W2bdsWPXr0iE6dOhWXnf0K73L6X58ALpx1neHjjz8eDz30UAwZMiSWL18eGzdujIaGhujfv3+cOXPmiswJ5NCmTZuoq6uLffv2xauvvvqe677f8eu1116Lz3/+83HgwIF46qmnYt26ddHQ0BDf+973IiKaHL8u5Lj7zjvvxD333BOVlZXx3HPPNfkmhjFjxsTixYtjypQpsWbNmti0aVPx3ZqWHDcv9LHQuvnAxzVuxIgRsXjx4tiyZUvxU7tn++Mf/xh79+6NyZMnX/C2b7nlljhz5kzs2bOn5JXjrl27Lmrmc61evTrq6urimWeeKVn+1ltvRZcuXS7pvgBOnToVERFHjx69qO2sXbs2/vvf/8bvfve7krOEL7744kVtNyLigQceiJdffjk2b97c5MMZhw8fjt///vcxe/bseOyxx4rLz43ZmpqaqKqqOm/k7ty584o9Fq48Z/6ucY888khUVVXF5MmTm3zE/9ChQzFlypT4wAc+EI888sgFb7vxmpCf/exnJcvnz5/f8oHPo23btk0+cbxq1ap44403Lul+AN59993YtGlTXHfddXHbbbdd1LYazwyeffw6cuRILFmy5KK2u2TJkli0aFEsWLAgBg0a1Kz9RkTMmzevyXrDhw+P559/Pv75z38Wl//tb3+LjRs3XpHHQnk483eN69OnT/zyl7+McePGxe23397kN3wcOHAgVq5cGb17977gbQ8YMCC+8pWvxLx58+LgwYPFr3r5xz/+ERFxyX4v5IgRI2LOnDkxYcKE+PSnPx2vvPJK/PrXv/6fX0oN0Fzr16+Pv//97xERsX///lixYkW8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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aqu√≠  podemos ver la binarizacion, que sera el considerar solo dos opciones, o blanco o negro, no grisies ni sub"
      ],
      "metadata": {
        "id": "BCepqYTXATtN"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MvWf-JGLATHG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Extracci√≥n de Caracter√≠sticas\n",
        "Sin redes neuronales, podemos extraer caracter√≠sticas manuales\n"
      ],
      "metadata": {
        "id": "qkg7DkQ4Foqb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# %%\n",
        "from skimage.feature import hog\n",
        "from skimage.measure import moments, moments_hu\n",
        "\n",
        "# Extraer HOG features (Histogram of Oriented Gradients)\n",
        "def extract_hog_features(image):\n",
        "    fd, hog_image = hog(\n",
        "        image,\n",
        "        orientations=8,\n",
        "        pixels_per_cell=(2, 2),\n",
        "        cells_per_block=(1, 1),\n",
        "        visualize=True,\n",
        "        block_norm='L2-Hys'\n",
        "    )\n",
        "    return fd, hog_image\n",
        "\n",
        "# Aplicar a una imagen\n",
        "hog_feat, hog_img = extract_hog_features(sample_img)\n",
        "\n",
        "# Mostrar HOG\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n",
        "ax1.imshow(sample_img, cmap='gray')\n",
        "ax1.set_title(\"Imagen Original\")\n",
        "ax1.axis('off')\n",
        "\n",
        "ax2.imshow(hog_img, cmap='gray')\n",
        "ax2.set_title(\"HOG Features\")\n",
        "ax2.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "XpxRj4TUFu2V",
        "outputId": "864c9afe-474c-4c24-bc70-c8f3618f7f07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En esta parte extraemos ciertas partes (pixeles) de la iamgen en un cierto orden, que es fundafundamental para el analisis"
      ],
      "metadata": {
        "id": "92BQa-PsAofL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Transformaciones Geom√©tricas\n",
        "Rotaci√≥n, escalado, traslaci√≥n"
      ],
      "metadata": {
        "id": "ewhuy-zXF1jK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from skimage.transform import rotate, rescale\n",
        "\n",
        "# Rotar imagen\n",
        "rotated = rotate(sample_img, angle=15)\n",
        "\n",
        "# Escalar imagen\n",
        "scaled = rescale(sample_img, scale=1.5)\n",
        "\n",
        "# Mostrar resultados\n",
        "fig, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
        "axes[0].imshow(sample_img, cmap='gray')\n",
        "axes[0].set_title(\"Original\")\n",
        "axes[0].axis('off')\n",
        "\n",
        "axes[1].imshow(rotated, cmap='gray')\n",
        "axes[1].set_title(\"Rotada 15¬∞\")\n",
        "axes[1].axis('off')\n",
        "\n",
        "axes[2].imshow(scaled, cmap='gray')\n",
        "axes[2].set_title(\"Escalada 1.5x\")\n",
        "axes[2].axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "LJFZLKA3F4fQ",
        "outputId": "af2740b7-3e6d-45b6-a99a-b1e81a94ad8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dentro de las transformaciones geometricas de las imagenes podemos encontrar la rotada, que nos da otra perspectiva de la imagen, como si nombre lo kndica gira en su propio eje, y por ltro lado la escalada, que es poner m√°s o menos pjxeles, dependiendo de la escala"
      ],
      "metadata": {
        "id": "Dbfl8jlMBFA7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Detecci√≥n de Bordes\n",
        "Usando operadores como Sobel"
      ],
      "metadata": {
        "id": "uGYN3BqWF9Jc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# %%\n",
        "from skimage.filters import sobel\n",
        "\n",
        "# Detectar bordes con Sobel\n",
        "edges = sobel(sample_img)\n",
        "\n",
        "# Mostrar resultado\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n",
        "ax1.imshow(sample_img, cmap='gray')\n",
        "ax1.set_title(\"Original\")\n",
        "ax1.axis('off')\n",
        "\n",
        "ax2.imshow(edges, cmap='gray')\n",
        "ax2.set_title(\"Bordes detectados\")\n",
        "ax2.axis('off')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "g6XE1koQGAUl",
        "outputId": "bd0065c2-e2b0-4e7d-a9fe-6b3b2646925e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este filtro nos ayuda a ver todos esos bordes que no estan tan presentes a  vista"
      ],
      "metadata": {
        "id": "ZxzWM55-B9Lu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9. Ejercicios Pr√°cticos\n",
        "Ahora t√∫ puedes probar:"
      ],
      "metadata": {
        "id": "jD4Ou5u3GFkw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# ### Ejercicio 1:\n",
        "# Crea una funci√≥n que calcule el n√∫mero de p√≠xeles blancos (valor alto) en cada imagen y compara con la etiqueta real\n",
        "\n",
        "# %%\n",
        "def count_white_pixels(img):\n",
        "    \"\"\"Cuenta p√≠xeles con valor alto (casi blanco)\"\"\"\n",
        "    return np.sum(img > 15)  # Umbral arbitrario\n",
        "\n",
        "# Probar con algunas im√°genes\n",
        "for i in range(5):\n",
        "    white_count = count_white_pixels(digits.images[i])\n",
        "    print(f\"Imagen {i}: {white_count} p√≠xeles blancos, etiqueta: {digits.target[i]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "hSuiACjkGKjo",
        "outputId": "9feb5b23-273b-404d-9f61-1f5b81eea101"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'digits' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1414790870.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Probar con algunas im√°genes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mwhite_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcount_white_pixels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdigits\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Imagen {i}: {white_count} p√≠xeles blancos, etiqueta: {digits.target[i]}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'digits' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ### Ejercicio 3:\n",
        "# Calcula y visualiza el histograma de intensidades para cada d√≠gito\n",
        "\n",
        "# %%\n",
        "# Crear figura con subplots\n",
        "fig, axes = plt.subplots(2, 5, figsize=(15, 6))\n",
        "axes = axes.flatten()\n",
        "\n",
        "for digit in range(10):\n",
        "    digit_imgs = digits.images[digits.target == digit]\n",
        "    # Promediar histogramas de todas las im√°genes del d√≠gito\n",
        "    hist_sum = np.zeros(16)\n",
        "    for img in digit_imgs:\n",
        "        hist, _ = np.histogram(img.ravel(), bins=16, range=(0, 16))\n",
        "        hist_sum += hist\n",
        "\n",
        "    axes[digit].bar(range(16), hist_sum / len(digit_imgs))\n",
        "    axes[digit].set_title(f\"D√≠gito {digit}\")\n",
        "    axes[digit].set_ylim(0, 50)\n",
        "\n",
        "plt.suptitle(\"Histograma de Intensidades por D√≠gito\", fontsize=16)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "oAEhVTKmGTMG",
        "outputId": "e76f2ff4-7f0e-49b7-a8dc-25c7a34d119b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 10 Axes>"
            ],
            "image/png": "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Wn379lW7du306aefatasWdq8eXOlJu5XX32lCRMmqFmzZmrfvr26deumX3/9VXl5eXrooYe0cOFCrV27Vk2aNHHreyhJBQUFuuSSS7R582adddZZ+tOf/qTy8nK98sorWrp0qTp16lTtvnfeeaf++c9/KjAwUBdeeKEuueQS7dy5U2+99ZbeeecdPfvss44XULyhsLBQvXr10s6dO3XJJZeoc+fOWrNmjV588UWtWLFCX331laKioiRJvXv31pEjR/TGG28oLCxMI0aMqPa4TzzxhLKzs1VeXq6uXbuqR48eys/P1/Lly/XBBx9o6tSpuu+++6rc9/nnn9e0adN0wQUXaODAgdq+fbvWrl2rzMxMxwsUFY4eParevXvr22+/VbNmzdS/f3+FhYUpPz9fGzdu1OrVq5Wdna3o6GiXc7Fx40b16dNHP//8s1q0aKErr7xSxcXFevzxx7Vs2bJq96vp9bxo0SKNHj1aZWVl6ty5s8477zzt2rVLf/3rX/Xdd99Ve769e/dq4MCB+uabbxQTE6OLLrpIERER+uKLL/Too49q0aJFWr58uRITEx37PPDAA8rJyVFQUJB69eqls88+W4WFhdq5c6eee+45derUSSkpKS7n6GSfffaZbrrpJsXFxal///769ddftXz5ck2aNEkrV67UwoULnR6zMUZjx47Viy++qKCgIF166aVq3ry5vvjiC82bN0+vv/663njjDQ0cOLDK8/3zn//Uv/71L1144YUaOHCg9u7dqwYNGnhUsyt/+ctftH79ei1fvly//fabgoJc//pY26ysEB4erszMTK1cuVJbt27VxRdfrLZt2zrWd+3a1fHv9evXa+DAgTp48KASEhI0bNgwFRYWavny5Vq9erUWL16st99+W8HBwR49fgAAACcGAACglhITE40kM2/ePMvt+vTpYySZnJwcp/Fly5YZSaZPnz5O45dddpmRZF5++eVKxzp06JBZs2aN09i8efOMJJOZmVltDSNHjjSSTI8ePcz+/fsd44cPHzaDBg0ykkyvXr2c9tmzZ48JDw83kswTTzzhtG7FihUmLCzMSDJV/WhVMR4ZGVmp3gqfffaZ+eabbyqN79mzx3Tp0sVIMgsXLnRat23bNsexzznnHLN9+3bHuv3795t27doZSea8884z3bt3d3qsP/30kznrrLOMJLNy5Uqn4+7atct89NFHpqyszGm8uLjYXHfddUaSufnmm6t8HNUZMWKEkWQuueQSc+jQIcf4gQMHTI8ePRyP49Tr55lnnjGSTNu2bc1XX33ltG7FihUmIiLCBAcHmx9//NHtWqq7BiuuHUkmPT3dFBYWOtYdPHjQdO3a1UgyDz30kNN+Fd+HxMTEas+5dOlSExAQYJo2bWpWrFjhtO7rr782LVu2NJLM8uXLndZVPK8aNmxo3nnnnSrrjYqKMkePHnWMv/DCC0aSGTRokDlx4oTTPmVlZWb58uWmpKTEaby6a/eiiy4yksw111xjjh075hjfsWOHOeeccxz7LVu2zGm/mlzP+/btMxEREUaSeeyxx5zWffTRRyY0NLTKOsvLy83FF19sJJnx48eboqIix7rS0lJzxx13GEnmsssuc4wfP37cNGrUyISHh5uNGzdWqnP79u3mhx9+qDRenczMTEdtN998syktLXWs+/bbb02zZs2MJDN37lyn/Z566ikjyTRt2tR8+eWXTo8pJyfHSDLR0dHm559/dtqv4rpo0KCBeeutt9yus0LFtWN1zVZYuXKl47Ft2bLFMV5dZtcmKyse17Zt25zGK+a3uv9fjh8/7tj3xhtvdLrut27dalq3bm0kmXvuucfl4wUAALBCIx0AANRaRRPD3cXdRnrHjh2NJHPw4EG36nDVSN+xY4cJDAw0AQEBlRqzxhize/duR8Nu1apVjvEHHnjASDKpqalVHvfOO+902Uh/4IEH3HoMp3r//feNJHP11Vc7jZ/cSH/33Xcr7ffYY48ZSSYgIKDKpubEiRONJDN16lS3aykuLjZBQUGmWbNmbu+zc+dOx5x/9913ldZ/+eWXVTbSy8rKTHx8vJFkPv/88yqPPWPGDCPJ3HHHHW7X46qRHhYWZvbu3Vtpv9dee81IMv369XMad6eRXvFiwX/+858q1y9cuNBIMhkZGU7jFc+r7OzsKvdLTk42kswnn3ziGKuYk1Ob0VaqunYrGqhhYWFOL8JUWLx4cbWNdCvVXc/Tpk0zkkzPnj2r3O+2226rss4lS5YYSaZr165ODewKZWVlpnPnzkaS43nw888/G0kmJSXF7bqtVDR6W7Ro4fSCQ4Unn3zSSDLt2rVzGq94MWLWrFmV9ikvLzcpKSlGkvnHP/7htK7iurj++utrVK8njfSNGzc65n3dunWO8eoyuzZZWdNG+ksvvWQkmfj4eHP8+PFK6//zn/8YSSYiIqLK7w8AAIC7uLULAADwmlP/9P5US5cuVUFBgdvH6969u77//nuNGTNG99xzj3r27OnWrQWq88knn6i8vFwXXHBBlbdtOPvss5Wenq633npLy5YtU69evSRJK1askCSNGTOmyuOOGTNG//u//2t5bqvbfki/38f8gw8+0Pr16/Xzzz+rpKRExhgdPnxYkrRp06Yq9wsKCtLll19eabxdu3aSpISEBHXu3Lna9Xv37q3yuKtXr9ann36qnTt36ujRozLGSJKCg4P1yy+/6Ndff9VZZ51l+ZikP+a8W7du6tixY6X1Xbt2VUpKSqV7Un/55Zfau3evzjnnHHXr1q3KY1fcn3n16tUu63DXhRdeqBYtWlQa79ChgyRVuk+6K/v379dnn32mRo0aaciQIVVu4+pxVLdfhw4dtHHjRqeaTr6ndZMmTfSnP/1JMTExHtUsyXGv7YEDB1Z5G5+hQ4cqKipKhYWFVe7v6fVccb7qnmOZmZl64oknKo2/++67kqSMjIwqsyEwMFCXXnqpvv32W61evVqdO3dWs2bN1Lp1a3399de64447NH78+CqvTU9dc801Cg0NrbL2iRMnavPmzdq7d6/i4+O1e/dubd261bH+VAEBARo3bpxuv/12LVu2TPfcc0+lbVxlijecfD/76m4tdTJvZKWnKq6dUaNGKSQkpNL64cOH66yzznLcouriiy/26vkBAMCZg0Y6AADwmr/+9a8aO3Zstev79u3rUSN9+vTp+vrrr7VkyRItWbLE8SGLffv21ZgxYxzNTXdVNBwrPiCyKuecc47TttLvH2InqdJ90ytUN+7uNmvXrtXIkSO1c+fOarcpKiqqcrxFixZVNhDDw8Ml/d5Ir0pERIQk6fjx407jP//8szIyMrRy5cpqa6mox51GesXcWc15UlJSpUb6Tz/9JEnaunWrywbeL7/84rIOd1U3X5GRkZIqz5cr27ZtkzFGx44dq7LJd7LqHocnNfXt21d33323Hn30UWVmZiogIEDt2rXTxRdfrKFDh2rIkCEKDAx0Wber71vFB91+9dVXldbV5Hp2db7qxiuukylTpmjKlCnVnk9ynt8XX3xRI0aM0GOPPabHHntMMTEx6tGjhwYMGKBrr71WTZs2tTyWJzVGRESoSZMmOnDggHbv3q34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Asy1117r+F5XNUfV2bdvnznnnHOMJBMTE2OGDx9urrrqKhMdHW3OOeccc+WVV1Z7/fy///f/HPV06tTJDB061IwaNcr07dvXREdHG0nmqaeecruW6q7B6uajgtV8jxgxwkgyrVq1MqNHjzbjx48348ePd9rmiSeecFy3bdu2NYMHDzZ//vOfzYABA0zz5s2NJHP33Xc77eNqrjMzMyvN22233WYkmaZNm5oBAwaYMWPGmCuvvNJxjrPPPtvs2rXL6TjVXaPfffed43kRHx9vrrnmGvOnP/3JNG7c2PTs2dOkpqYaSWbZsmVO+9XkejbGmFdffdU0aNDASDLnnXeeGT16tLn00ktNQECAuf3226utc8+ePaZr165GkgkLCzO9evUyo0aNMsOHDzddu3Z1HPPYsWPGGGO+/PJLx/P1oosuMtdcc4255pprzPnnn28kmYCAAPPvf/+7yjm3+j7ceOONJjQ01CQlJZlRo0aZ9PR0ExwcbCSZq666ypSXlzvtV15ebq699lojyQQFBZn+/fub0aNHm/bt2xtJplGjRua9996rdL6aPAdPVnGth4WFmczMTJOZmWmuvfZaM2zYMHPeeec5ci48PNw8+eSTleo2xjpfapqV1T2ur776ygQGBprAwECTlpZmxo0bZ8aPH2/eeustxzafffaZiYmJcVxbI0eONFdccYUJDQ01kkx6eropKSmp0XwBAABUoJEOAABqra4a6S+//LIZN26c6dy5s4mJiTEhISEmMTHRDBo0yCxevLjKBs8333xjrrzyStOsWTNHM+fU4xYXF5vp06ebrl27msaNG5vQ0FDToUMHc88995iDBw9WW//y5cvNgAEDTGRkpGncuLG54IILzHPPPWd27txpJJkWLVpU2sedRvqJEyfMo48+as477zzTuHFjExMTYy6//HLzwQcfVNvAratGujHGvPnmm6ZXr14mOjrahIeHmwsvvNDMmTPHlJeX17iJt3//fjNx4kTTsmVLExwcbFq2bGluvPFG88svv1TZED7ZqlWrzJgxY0xiYqIJCQkxERER5txzzzXDhg0z//73vy2/Z6eqi0b6gQMHzP/8z/+YhIQE07Bhw2q/5998842ZMGGCadeunQkNDTWNGzc2bdq0Menp6WbWrFlmz549TtvXpJH+5Zdfmr/97W+md+/e5uyzzzbBwcGmWbNmplu3buahhx4y+/fvr3Qcq2t0x44dZuzYsSY2NtYEBwebNm3amLvvvtsUFxc75vLURnpNrucKn376qUlPT3c8x84//3zz9NNPu6zz+PHjZu7cueayyy4zTZo0MUFBQaZ58+ama9euJisry7z//vuObYuKiszMmTPNVVddZdq1a2fCw8NNWFiYOffcc811111nPv/88yrPUZ2Tvw9ffPGFGTJkiGnSpIkJCQkxnTp1Mo899pgpLS2tdv8FCxY4Xhhq2LChadWqlRk7dqzZuHFjldt7q5F+8tKwYUMTExNjOnToYEaNGmWefvppU1hYWO0xXOVLTbLS6nEtXrzYXHzxxSYiIsIEBARU+RzeuXOnycrKMm3atDHBwcEmIiLCpKammqeeespy/gEAANwVYIwXPzoeAADgDPTiiy8qMzNTQ4YM0dtvv+3rcgCcRmPHjtULL7ygefPmaezYsb4ux9bISgAA4M+4RzoAAIAbdu7cqfz8/Erjq1atctzreNy4cae7LACwFbISAADUV0G+LgAAAMAffPzxxxo/fry6dOmihIQENWjQQFu3bnV8SOC4ceN01VVX+bhKAPAtshIAANRXNNIBAADc0LNnT40bN06ffvqpli9fruLiYkVHRystLU3XX3+9Ro8e7esSAcDnyEoAAFBfcY90AAAAAAAAAAAscI90AAAAAAAAAAAs0EgHAAAAAAAAAMACjXQAAAAAAAAAACzQSAcAAAAAAAAAwAKNdAAAAAAAAAAALNBIBwAAAAAAAADAAo10AAAAAAAAAAAs0EgHAAAAAAAAAMACjXQAAAAAAAAAACzQSAcAAAAAAAAAwAKNdAAAAAAAAAAALNBIBwAAAAAAAADAAo10AAAAAAAAAAAs0EgHAAAAAAAAAMACjXQAAAAAAAAAACzQSAcAAAAAAAAAwAKNdAAAAAAAAAAALNBIh1f9+9//1tNPP+3rMgCgSmQUADsjowDYGRkFwM7IKJwONNLhNR988IFuvPFGtW/f3qP95s+fr4CAAG3fvr1uCgMAkVEA7I2MAmBnZBQAOyOjcLrQSEclFUFSsYSGhio+Pl7p6emaNWuWDh8+XGmf4uJiTZgwQVOnTlXfvn1rXcOcOXM0f/78Wh+nKqtXr1bv3r3VuHFjxcXF6dZbb9WRI0fq5FwAvK8+Z9QHH3yg8ePHq3PnzmrQoIFat27t9XMAqFv1NaOOHj2q2bNn6/LLL1eLFi0UERGh888/X0899ZTKysq8ei4Adae+ZpQkPfTQQ+rZs6eaNWum0NBQtWvXTpMmTdIvv/zi9XMBqBv1OaNOdujQITVv3lwBAQH6z3/+U6fngncFGGOMr4uAvcyfP1/jxo3TAw88oKSkJJWWlio/P1/Lly/Xhx9+qISEBL399ttKSUlx7HPbbbfpxx9/1HvvvaeAgACPzldWVqbS0lKFhIQ49u3cubOaNm2q5cuXe/OhacOGDUpNTVWHDh00YcIE7d69W//7v/+ryy67TEuWLPHquQDUjfqcUWPHjtXrr7+uCy64QDt37lSDBg14dwTgZ+prRn377bdKSUlR//79dfnllysyMlLvv/++Fi9erOuuu04vvPCC184FoO7U14ySpIyMDDVr1kzJycmKiIjQDz/8oGeffVbNmzfXhg0bFBYW5tXzAfC++pxRJ7v11lv1/PPPq7i4WIsWLdKIESPq7FzwMgOcYt68eUaSWb9+faV1ubm5plGjRiYxMdEcPXq0zmro1KmT6dOnj9ePO2jQINOiRQtTWFjoGHv22WeNJPP+++97/XwAvK8+Z9SePXvMiRMnjDHGDB482CQmJnr9HADqVn3NqF9++cV8++23lcbHjRtnJJnNmzd79XwA6kZ9zajq/Oc//zGSzKuvvnpazgegds6EjPrmm29MUFCQeeCBB4wks2jRojo7F7yPW7vAI/369dOUKVO0Y8cOvfzyy47x+++/v9Irf8eOHdOtt96qpk2bKiIiQldeeaX27NmjgIAA3X///Y7tTr0nVevWrfXdd99pxYoVjj/nOfnPc3766SddffXViomJUePGjdWzZ0+9++67LmsvKirShx9+qL/85S+KjIx0jF933XUKDw/XwoULazYpAGzDnzNKkuLj49WwYcMaP34A9ubPGdW0aVN16tSp0vhVV10lSfrhhx88mAkAduTPGVWditvkHTp0qMbHAGAP9SWjbrvtNl111VW65JJLPJ4D+B6NdHjs2muvlfT7vXytjB07Vk8++aSuuOIKPfLII2rUqJEGDx7s8vgzZ85Uy5YtlZycrJdeekkvvfSS7r33XklSQUGBevXqpffff18333yz/vGPf+j48eO68sortXjxYsvjfvPNN/rtt9904YUXOo0HBwera9eu+vLLL13WBsD+/DWjAJwZ6ltG5efn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6aWXnMbnzp1rJJnOnTtXuy/shXeko0bCw8Or/LTkCkuXLpUk3XzzzU7jEydOrNV533vvPXXv3l29e/d2qmXChAnavn27vv/+e8v9n3vuOeXk5Gj48OG69tpr9dZbb+mGG27QwoULtXbt2lrVBsA+/DGjKm43dfjwYeXm5mrs2LEaO3asPvroIxljNGPGjFrVBsA+/DGjTvXjjz8qLy9Po0aNUmAgv1IA9Ym/ZlRERIQ6deqkrKws/d///Z/mzJmj3377TcOGDdP+/ftrVRsA+/DHjLriiiuUmJioO++8U//3f/+nHTt2aOHChbr33nsVFBSkY8eO1ao2nD781IsaOXLkiCIiIqpdv2PHDgUGBiopKclpvG3btrU6744dO9S+fftK4x06dHCs99Qdd9whSfroo49qVRsA+/DHjKr4M7+LL75YrVq1cownJCSod+/eWr16da1qA2Af/phRp3rllVckidu6APWQP2bUb7/9prS0NEVFRelf//qXrrrqKt1000366KOPtHXrVj366KO1qg2AffhjRoWGhurdd99VkyZNlJGRodatW+u6667Tfffdp5iYGIWHh9eqNpw+NNLhsd27d6uwsLDWIWQXFQ2rgwcP+rgSAN7grxkVHx8vSZU+JEv6/YOyfv3119NdEoA64K8ZdaoFCxaoffv26tatm69LAeBF/ppRn3zyib799ltdeeWVTuPt2rVThw4dtGrVKh9VBsCb/DWjJKlTp0769ttv9e233+rTTz/V3r17dcMNN2j//v0699xzfV0e3EQjHR576aWXJEnp6enVbpOYmKjy8nJt27bNaXzLli1unePUT1w++bibNm2qNL5x40bHek/99NNPkqRmzZp5vC8A+/HXjDrvvPPUsGFD7dmzp9K6vXv3klFAPeGvGXWydevWacuWLbwbHaiH/DWjCgoKJEllZWWV1pWWluq3335zqzYA9uavGXXysTt16qTevXsrJiZGy5YtU3l5udLS0tyqDb5HIx0e+fjjj/Xggw8qKSnJ8penilCbM2eO0/iTTz7p1nnCwsJ06NChSuNXXHGFPvvsM61Zs8YxVlxcrGeeeUatW7dWx44dqz1mUVGR45OSKxhjNG3aNKeaAfgvf86oiIgIXXHFFVq9erXjhzFJ+uGHH7R69WoNGDDArdoA2Jc/Z9TJFixYIEn685//7Nb2APyDP2dUxbs5X3vtNafxL774Qps2bdL555/vVm0A7MufM6oqx44d05QpU9SiRQuNHj3ao33hO0G+LgD2tWTJEm3cuFG//fabCgoK9PHHH+vDDz9UYmKi3n77bYWGhla7b7du3ZSRkaGZM2fqwIED6tmzp1asWKEff/xRUvWv8J28/1NPPaVp06apbdu2at68ufr166e//e1vevXVVzVo0CDdeuutiomJ0QsvvKBt27bpjTfesPywqy+++EKjR4/W6NGj1bZtWx07dkyLFy/WqlWrNGHCBF1wwQU1mygAPlHfMkqSHnroIeXm5qpfv3669dZbJUmzZs1STEyM7rnnHg9nCIAv1ceMkn5/t+frr7+unj176pxzzvFsUgDYRn3LqG7dumnAgAF64YUXVFRUpMsvv1z79u3Tk08+qUaNGmnSpEk1micAvlHfMkqSrrnmGsXHx6tjx44qKirS888/r59++knvvvuu5T3fYTMGOMW8efOMJMcSHBxs4uLizIABA8wTTzxhioqKKu2Tk5NjTr2ciouLTVZWlomJiTHh4eFm2LBhZtOmTUaSefjhhyudb9u2bY6x/Px8M3jwYBMREWEkmT59+jjWbd261YwYMcJER0eb0NBQ0717d/Pf//7X5eP66aefzNVXX21at25tQkNDTePGjU23bt3M3LlzTXl5uecTBcAn6mtGVcjLyzNpaWkmLCzMREREmKFDh5off/zR/QkC4FP1PaOWLl1qJJlZs2a5PykAbKM+Z9TRo0fNAw88YDp27GgaNWpkoqKizJ/+9Cfz5ZdfejRHAHynPmfUI488YpKTk01oaKg566yzzJVXXkk++aEAY4yp21Y98IcNGzbo/PPP18svv8x9NQHYDhkFwM7IKAB2RkYBsDMyCt7APdJRZ44dO1ZpbObMmQoMDNSll17qg4oA4A9kFAA7I6MA2BkZBcDOyCjUFe6RjjozY8YM5eXl6bLLLlNQUJCWLFmiJUuWaMKECWrVqpWvywNwhiOjANgZGQXAzsgoAHZGRqGucGsX1JkPP/xQU6dO1ffff68jR44oISFB1157re69914FBfEaDgDfIqMA2BkZBcDOyCgAdkZGoa54dGuX+++/XwEBAU5LcnKyY/3x48eVlZWlJk2aKDw8XBkZGSooKPB60fAPAwYM0MqVK3Xw4EGdOHFCW7ZsUU5ODqGFOkNGwRNkFE43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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "estestos ejercicios nos ayudan a poder entender un poco mas el como estos filtros nos ayudan a porcesar mas y mejor los datos y todo esto sin usar redes neutonales, lo mas impactante es que sin usarlas podemos lograr esto, entonces al usarlas podremos crear cosas kas impresionantes."
      ],
      "metadata": {
        "id": "BqgO-9lpCfpX"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gRNgMkbQCfVr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}